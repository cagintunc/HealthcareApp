import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

# Load the files
demo_file = "DEMO_I.xpt"
diq_file = "DIQ_I.xpt"
dbq_file = "DBQ_I.xpt"

demo_data = pd.read_sas(demo_file)
diq_data = pd.read_sas(diq_file)
dbq_data = pd.read_sas(dbq_file)

# Merge datasets (use 'SEQN' as the common identifier)
merged_data = demo_data.merge(diq_data[['SEQN', 'DIQ010']], on="SEQN", how="inner").merge(dbq_data, on="SEQN", how="inner")

# Filter DIQ010: 1 - Diabetes, 2 - No Diabetes (drop other values)
merged_data = merged_data[(merged_data['DIQ010'] == 1) | (merged_data['DIQ010'] == 2)]
merged_data['DIQ010'] = merged_data['DIQ010'].map({1: 1, 2: 0})  # 1 for diabetes, 0 for no diabetes

# Select features from DEMO and DBQ files
selected_features = demo_data.columns.tolist() + dbq_data.columns.tolist()
selected_features = [col for col in selected_features if col not in ['SEQN']]  # Exclude SEQN

features = merged_data[selected_features]
labels = merged_data['DIQ010']

# Handle missing values
imputer = SimpleImputer(strategy="mean")
features_imputed = imputer.fit_transform(features)

# Standardize the features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_imputed)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(features_scaled, labels, test_size=0.3, random_state=42)

# Train Random Forest model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Predictions and evaluation
y_pred = rf_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Feature importance
feature_importances = rf_model.feature_importances_
important_features = pd.DataFrame({
    "Feature": merged_data.drop(columns=["SEQN", "DIQ010"]).columns,
    "Importance": feature_importances
}).sort_values(by="Importance", ascending=False)

print("\nTop Features:")
print(important_features.head(10))
